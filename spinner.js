/*
// https://raw.githubusercontent.com/sindresorhus/cli-spinners/00de8fbeee16fa49502fa4f687449f70f2c8ca2c/spinners.json

{
    // BRAIL FONT:
	"dots1": {
		"interval": 80,
		"frames": [
			"РаІ",
			"РаЎ",
			"Ра╣",
			"РаИ",
			"Ра╝",
			"Ра┤",
			"Рад",
			"РаД",
			"РаЄ",
			"РаЈ"
		]	
	},
	"dots2": {
		"interval": 80,
		"frames": [
			"Раё",
			"Рає",
			"РаЄ",
			"РаІ",
			"РаЎ",
			"РаИ",
			"Ра░",
			"Раа",
			"Ра░",
			"РаИ",
			"РаЎ",
			"РаІ",
			"РаЄ",
			"Рає"
		]
	},
	"dots3": {
		"interval": 80,
		"frames": [
			"Рбё",
			"Рбѓ",
			"РбЂ",
			"РАЂ",
			"РАѕ",
			"РАљ",
			"РАа"
		]
	},
	"dots4": {
		"interval": 100,
		"frames": [
			"РаЂ",
			"Раѓ",
			"Раё",
			"РАђ",
			"Рбђ",
			"Раа",
			"Раљ",
			"Раѕ"
		]
	},
	"dots5": {
		"interval": 80,
		"frames": [
			"РбђРађ",
			"РАђРађ",
			"РаёРађ",
			"РбѓРађ",
			"РАѓРађ",
			"РаЁРађ",
			"РбЃРађ",
			"РАЃРађ",
			"РаЇРађ",
			"РбІРађ",
			"РАІРађ",
			"РаЇРаЂ",
			"РбІРаЂ",
			"РАІРаЂ",
			"РаЇРаЅ",
			"РаІРаЅ",
			"РаІРаЅ",
			"РаЅРаЎ",
			"РаЅРаЎ",
			"РаЅРаЕ",
			"РаѕРбЎ",
			"РаѕРАЎ",
			"РбѕРаЕ",
			"РАђРбЎ",
			"РаёРАЎ",
			"РбѓРаЕ",
			"РАѓРбў",
			"РаЁРАў",
			"РбЃРае",
			"РАЃРбљ",
			"РаЇРАљ",
			"РбІРаа",
			"РАІРбђ",
			"РаЇРАЂ",
			"РбІРаЂ",
			"РАІРаЂ",
			"РаЇРаЅ",
			"РаІРаЅ",
			"РаІРаЅ",
			"РаЅРаЎ",
			"РаЅРаЎ",
			"РаЅРаЕ",
			"РаѕРбЎ",
			"РаѕРАЎ",
			"РаѕРаЕ",
			"РађРбЎ",
			"РађРАЎ",
			"РађРаЕ",
			"РађРбў",
			"РађРАў",
			"РађРае",
			"РађРбљ",
			"РађРАљ",
			"РађРаа",
			"РађРбђ",
			"РађРАђ"
		]
	},
	"line2": {
		"interval": 100,
		"frames": [
			"Раѓ",
			"-",
			"РђЊ",
			"Рђћ",
			"РђЊ",
			"-"
		]	
	},

    // EMOJI FONT:
	"weather": {
		"interval": 100,
		"frames": [
			"Рўђ№ИЈ ",
			"Рўђ№ИЈ ",
			"Рўђ№ИЈ ",
			"­Ъїц ",
			"РЏЁ№ИЈ ",
			"­ЪїЦ ",
			"РўЂ№ИЈ ",
			"­ЪїД ",
			"­Ъїе ",
			"­ЪїД ",
			"­Ъїе ",
			"­ЪїД ",
			"­Ъїе ",
			"РЏѕ ",
			"­Ъїе ",
			"­ЪїД ",
			"­Ъїе ",
			"РўЂ№ИЈ ",
			"­ЪїЦ ",
			"РЏЁ№ИЈ ",
			"­Ъїц ",
			"Рўђ№ИЈ ",
			"Рўђ№ИЈ "
		]
	},
	"orangeBluePulse": {
		"interval": 100,
		"frames": [
			"­ЪћИ ",
			"­ЪћХ ",
			"­ЪЪа ",
			"­ЪЪа ",
			"­ЪћХ ",
			"­Ъћ╣ ",
			"­Ъћи ",
			"­Ъћх ",
			"­Ъћх ",
			"­Ъћи "
		]
	},
	"clock": {
		"interval": 100,
		"frames": [
			"­ЪЋЏ ",
			"­ЪЋљ ",
			"­ЪЋЉ ",
			"­ЪЋњ ",
			"­ЪЋЊ ",
			"­ЪЋћ ",
			"­ЪЋЋ ",
			"­ЪЋќ ",
			"­ЪЋЌ ",
			"­ЪЋў ",
			"­ЪЋЎ ",
			"­ЪЋџ "
		]
	},

    // ASCII
    "line1": {
		"interval": 130,
		"frames": [
			"-",
			"\\",
			"|",
			"/"
		]
	},
	"simpleDots": {
		"interval": 400,
		"frames": [
			".  ",
			".. ",
			"...",
			"   "
		]
	},
	"simpleDotsScrolling": {
		"interval": 200,
		"frames": [
			".  ",
			".. ",
			"...",
			" ..",
			"  .",
			"   "
		]
	},
	"bar1": {
		"interval": 70,
		"frames": [
			"[    ]",
            "[=   ]",
            "[==  ]",
            "[=== ]",
            "[ ===]",
            "[  ==]",
            "[   =]",
            "[    ]",
            "[   =]",
            "[  ==]",
            "[ ===]",
            "[====]",
            "[=== ]",
            "[==  ]",
            "[=   ]"
		]
	},
	"bar2": {
		"interval": 70,
		"frames": [
			"|    |",
            "|=   |",
            "|==  |",
            "|=== |",
            "| ===|",
            "|  ==|",
            "|   =|",
            "|    |",
            "|   =|",
            "|  ==|",
            "| ===|",
            "|====|",
            "|=== |",
            "|==  |",
            "|=   |"
		]
	}
}
*/

/*
.setSpinnerString('|/-\\'); // <= or num or type from enum
*/

// Imports:
const { setColor, colors } = require('./colors.js');

class Spinner {
	constructor(msg) {
		this.msg = msg + ' ';
	}

	start() {
		const interval = 70;
		let frameNum = 0;
		const frames = ['[    ]', '[=   ]', '[==  ]', '[=== ]', '[ ===]', '[  ==]', '[   =]', '[    ]', '[   =]', '[  ==]', '[ ===]', '[====]', '[=== ]', '[==  ]', '[=   ]'];

		this.timer = setInterval(() => {
			process.stdout.write('\r' + this.msg + setColor(frames[frameNum++], colors['spinner']));
			frameNum %= frames.length;
		}, interval);
	}

	stop(errState = false) {
		clearInterval(this.timer);
		process.stdout.write('\r' + this.msg + (errState ? setColor('[ ERR ]', colors['spinnerErr']) : setColor('[ OK ]', colors['spinnerOk'])) + '\n');
	}
}

/* Test:
const testSpinner = new Spinner("@ Fetching price from " + setColor("{GOG}", colors["store"]));

testSpinner.start();
setTimeout(() => {
    testSpinner.stop();
}, 4000);
*/

exports.Spinner = Spinner;
